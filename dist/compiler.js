'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (response, asArray, isLogging) {
  var respParts = [];
  var resp = (response.tag || '') + (response.command ? ' ' + response.command : '');
  var needsSpace = true;

  var walk = function walk(node) {
    if (resp.length > 0 && needsSpace) {
      resp += ' ';
    }

    if (Array.isArray(node)) {
      needsSpace = false;
      resp += '(';
      node.forEach(walk);
      resp += ')';
      return;
    } else {
      needsSpace = true;
    }

    if (!node && typeof node !== 'string' && typeof node !== 'number') {
      resp += 'NIL';
      return;
    }

    if (typeof node === 'string') {
      if (isLogging && node.length > 20) {
        resp += '"(* ' + node.length + 'B string *)"';
      } else {
        resp += JSON.stringify(node);
      }
      return;
    }

    if (typeof node === 'number') {
      resp += Math.round(node) || 0; // Only integers allowed
      return;
    }

    if (isLogging && node.sensitive) {
      resp += '"(* value hidden *)"';
      return;
    }

    switch (node.type.toUpperCase()) {
      case 'LITERAL':
        if (isLogging) {
          resp += '"(* ' + node.value.length + 'B literal *)"';
        } else {
          if (!node.value) {
            resp += '{0}\r\n';
          } else {
            resp += '{' + node.value.length + '}\r\n';
          }
          respParts.push(resp);
          resp = node.value || '';
        }
        break;

      case 'STRING':
        if (isLogging && node.value.length > 20) {
          resp += '"(* ' + node.value.length + 'B string *)"';
        } else {
          resp += JSON.stringify(node.value || '');
        }
        break;
      case 'TEXT':
      case 'SEQUENCE':
        if (node.chunk) {
          resp = resp.slice(0, -1) + '\r\n'; // Remove the last trailing space and add a newline
          respParts.push(resp);
          resp = node.value || '';
        } else {
          resp += node.value || '';
        }
        break;

      case 'NUMBER':
        resp += node.value || 0;
        break;

      case 'ATOM':
      case 'SECTION':
        var val = node.value || '';

        if ((0, _formalSyntax.verify)(val.charAt(0) === '\\' ? val.substr(1) : val, (0, _formalSyntax.ATOM_CHAR)()) >= 0) {
          val = JSON.stringify(val);
        }

        resp += val;

        if (node.section) {
          resp += '[';
          if (node.section.length) {
            needsSpace = false;
            node.section.forEach(walk);
          }
          resp += ']';
        }
        if (node.partial) {
          resp += '<' + node.partial.join('.') + '>';
        }
        break;
    }
  };

  [].concat(response.attributes || []).forEach(walk);

  if (resp.length) {
    respParts.push(resp);
  }

  return asArray ? respParts : respParts.join('');
};

var _formalSyntax = require('./formal-syntax');

;

/**
 * Compiles an input object into
 */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21waWxlci5qcyJdLCJuYW1lcyI6WyJyZXNwb25zZSIsImFzQXJyYXkiLCJpc0xvZ2dpbmciLCJyZXNwUGFydHMiLCJyZXNwIiwidGFnIiwiY29tbWFuZCIsIm5lZWRzU3BhY2UiLCJ3YWxrIiwibm9kZSIsImxlbmd0aCIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJKU09OIiwic3RyaW5naWZ5IiwiTWF0aCIsInJvdW5kIiwic2Vuc2l0aXZlIiwidHlwZSIsInRvVXBwZXJDYXNlIiwidmFsdWUiLCJwdXNoIiwiY2h1bmsiLCJzbGljZSIsInZhbCIsImNoYXJBdCIsInN1YnN0ciIsInNlY3Rpb24iLCJwYXJ0aWFsIiwiam9pbiIsImNvbmNhdCIsImF0dHJpYnV0ZXMiXSwibWFwcGluZ3MiOiI7Ozs7OztrQkFLZSxVQUFVQSxRQUFWLEVBQW9CQyxPQUFwQixFQUE2QkMsU0FBN0IsRUFBd0M7QUFDckQsTUFBSUMsWUFBWSxFQUFoQjtBQUNBLE1BQUlDLE9BQU8sQ0FBQ0osU0FBU0ssR0FBVCxJQUFnQixFQUFqQixLQUF3QkwsU0FBU00sT0FBVCxHQUFtQixNQUFNTixTQUFTTSxPQUFsQyxHQUE0QyxFQUFwRSxDQUFYO0FBQ0EsTUFBSUMsYUFBYSxJQUFqQjs7QUFFQSxNQUFJQyxPQUFPLFNBQVBBLElBQU8sQ0FBVUMsSUFBVixFQUFnQjtBQUN6QixRQUFJTCxLQUFLTSxNQUFMLEdBQWMsQ0FBZCxJQUFtQkgsVUFBdkIsRUFBbUM7QUFDakNILGNBQVEsR0FBUjtBQUNEOztBQUVELFFBQUlPLE1BQU1DLE9BQU4sQ0FBY0gsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCRixtQkFBYSxLQUFiO0FBQ0FILGNBQVEsR0FBUjtBQUNBSyxXQUFLSSxPQUFMLENBQWFMLElBQWI7QUFDQUosY0FBUSxHQUFSO0FBQ0E7QUFDRCxLQU5ELE1BTU87QUFDTEcsbUJBQWEsSUFBYjtBQUNEOztBQUVELFFBQUksQ0FBQ0UsSUFBRCxJQUFTLE9BQU9BLElBQVAsS0FBZ0IsUUFBekIsSUFBcUMsT0FBT0EsSUFBUCxLQUFnQixRQUF6RCxFQUFtRTtBQUNqRUwsY0FBUSxLQUFSO0FBQ0E7QUFDRDs7QUFFRCxRQUFJLE9BQU9LLElBQVAsS0FBZ0IsUUFBcEIsRUFBOEI7QUFDNUIsVUFBSVAsYUFBYU8sS0FBS0MsTUFBTCxHQUFjLEVBQS9CLEVBQW1DO0FBQ2pDTixnQkFBUSxTQUFTSyxLQUFLQyxNQUFkLEdBQXVCLGNBQS9CO0FBQ0QsT0FGRCxNQUVPO0FBQ0xOLGdCQUFRVSxLQUFLQyxTQUFMLENBQWVOLElBQWYsQ0FBUjtBQUNEO0FBQ0Q7QUFDRDs7QUFFRCxRQUFJLE9BQU9BLElBQVAsS0FBZ0IsUUFBcEIsRUFBOEI7QUFDNUJMLGNBQVFZLEtBQUtDLEtBQUwsQ0FBV1IsSUFBWCxLQUFvQixDQUE1QixDQUQ0QixDQUNFO0FBQzlCO0FBQ0Q7O0FBRUQsUUFBSVAsYUFBYU8sS0FBS1MsU0FBdEIsRUFBaUM7QUFDL0JkLGNBQVEsc0JBQVI7QUFDQTtBQUNEOztBQUVELFlBQVFLLEtBQUtVLElBQUwsQ0FBVUMsV0FBVixFQUFSO0FBQ0UsV0FBSyxTQUFMO0FBQ0UsWUFBSWxCLFNBQUosRUFBZTtBQUNiRSxrQkFBUSxTQUFTSyxLQUFLWSxLQUFMLENBQVdYLE1BQXBCLEdBQTZCLGVBQXJDO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsY0FBSSxDQUFDRCxLQUFLWSxLQUFWLEVBQWlCO0FBQ2ZqQixvQkFBUSxTQUFSO0FBQ0QsV0FGRCxNQUVPO0FBQ0xBLG9CQUFRLE1BQU1LLEtBQUtZLEtBQUwsQ0FBV1gsTUFBakIsR0FBMEIsT0FBbEM7QUFDRDtBQUNEUCxvQkFBVW1CLElBQVYsQ0FBZWxCLElBQWY7QUFDQUEsaUJBQU9LLEtBQUtZLEtBQUwsSUFBYyxFQUFyQjtBQUNEO0FBQ0Q7O0FBRUYsV0FBSyxRQUFMO0FBQ0UsWUFBSW5CLGFBQWFPLEtBQUtZLEtBQUwsQ0FBV1gsTUFBWCxHQUFvQixFQUFyQyxFQUF5QztBQUN2Q04sa0JBQVEsU0FBU0ssS0FBS1ksS0FBTCxDQUFXWCxNQUFwQixHQUE2QixjQUFyQztBQUNELFNBRkQsTUFFTztBQUNMTixrQkFBUVUsS0FBS0MsU0FBTCxDQUFlTixLQUFLWSxLQUFMLElBQWMsRUFBN0IsQ0FBUjtBQUNEO0FBQ0Q7QUFDRixXQUFLLE1BQUw7QUFDQSxXQUFLLFVBQUw7QUFDRSxZQUFJWixLQUFLYyxLQUFULEVBQWdCO0FBQ2RuQixpQkFBT0EsS0FBS29CLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBQyxDQUFmLElBQW9CLE1BQTNCLENBRGMsQ0FDb0I7QUFDbENyQixvQkFBVW1CLElBQVYsQ0FBZWxCLElBQWY7QUFDQUEsaUJBQU9LLEtBQUtZLEtBQUwsSUFBYyxFQUFyQjtBQUNELFNBSkQsTUFJTztBQUNMakIsa0JBQVFLLEtBQUtZLEtBQUwsSUFBYyxFQUF0QjtBQUNEO0FBQ0Q7O0FBRUYsV0FBSyxRQUFMO0FBQ0VqQixnQkFBU0ssS0FBS1ksS0FBTCxJQUFjLENBQXZCO0FBQ0E7O0FBRUYsV0FBSyxNQUFMO0FBQ0EsV0FBSyxTQUFMO0FBQ0UsWUFBSUksTUFBTWhCLEtBQUtZLEtBQUwsSUFBYyxFQUF4Qjs7QUFFQSxZQUFJLDBCQUFPSSxJQUFJQyxNQUFKLENBQVcsQ0FBWCxNQUFrQixJQUFsQixHQUF5QkQsSUFBSUUsTUFBSixDQUFXLENBQVgsQ0FBekIsR0FBeUNGLEdBQWhELEVBQXFELDhCQUFyRCxLQUFxRSxDQUF6RSxFQUE0RTtBQUMxRUEsZ0JBQU1YLEtBQUtDLFNBQUwsQ0FBZVUsR0FBZixDQUFOO0FBQ0Q7O0FBRURyQixnQkFBUXFCLEdBQVI7O0FBRUEsWUFBSWhCLEtBQUttQixPQUFULEVBQWtCO0FBQ2hCeEIsa0JBQVEsR0FBUjtBQUNBLGNBQUlLLEtBQUttQixPQUFMLENBQWFsQixNQUFqQixFQUF5QjtBQUN2QkgseUJBQWEsS0FBYjtBQUNBRSxpQkFBS21CLE9BQUwsQ0FBYWYsT0FBYixDQUFxQkwsSUFBckI7QUFDRDtBQUNESixrQkFBUSxHQUFSO0FBQ0Q7QUFDRCxZQUFJSyxLQUFLb0IsT0FBVCxFQUFrQjtBQUNoQnpCLGtCQUFRLE1BQU1LLEtBQUtvQixPQUFMLENBQWFDLElBQWIsQ0FBa0IsR0FBbEIsQ0FBTixHQUErQixHQUF2QztBQUNEO0FBQ0Q7QUExREo7QUE0REQsR0FuR0Q7O0FBcUdBLEtBQUdDLE1BQUgsQ0FBVS9CLFNBQVNnQyxVQUFULElBQXVCLEVBQWpDLEVBQXFDbkIsT0FBckMsQ0FBNkNMLElBQTdDOztBQUVBLE1BQUlKLEtBQUtNLE1BQVQsRUFBaUI7QUFDZlAsY0FBVW1CLElBQVYsQ0FBZWxCLElBQWY7QUFDRDs7QUFFRCxTQUFPSCxVQUFVRSxTQUFWLEdBQXNCQSxVQUFVMkIsSUFBVixDQUFlLEVBQWYsQ0FBN0I7QUFDRCxDOztBQXRIRDs7QUFzSEM7O0FBcEhEIiwiZmlsZSI6ImNvbXBpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVRPTV9DSEFSLCB2ZXJpZnkgfSBmcm9tICcuL2Zvcm1hbC1zeW50YXgnXG5cbi8qKlxuICogQ29tcGlsZXMgYW4gaW5wdXQgb2JqZWN0IGludG9cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHJlc3BvbnNlLCBhc0FycmF5LCBpc0xvZ2dpbmcpIHtcbiAgbGV0IHJlc3BQYXJ0cyA9IFtdXG4gIGxldCByZXNwID0gKHJlc3BvbnNlLnRhZyB8fCAnJykgKyAocmVzcG9uc2UuY29tbWFuZCA/ICcgJyArIHJlc3BvbnNlLmNvbW1hbmQgOiAnJylcbiAgbGV0IG5lZWRzU3BhY2UgPSB0cnVlXG5cbiAgbGV0IHdhbGsgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChyZXNwLmxlbmd0aCA+IDAgJiYgbmVlZHNTcGFjZSkge1xuICAgICAgcmVzcCArPSAnICdcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgICAgbmVlZHNTcGFjZSA9IGZhbHNlXG4gICAgICByZXNwICs9ICcoJ1xuICAgICAgbm9kZS5mb3JFYWNoKHdhbGspXG4gICAgICByZXNwICs9ICcpJ1xuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIHtcbiAgICAgIG5lZWRzU3BhY2UgPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKCFub2RlICYmIHR5cGVvZiBub2RlICE9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygbm9kZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHJlc3AgKz0gJ05JTCdcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChpc0xvZ2dpbmcgJiYgbm9kZS5sZW5ndGggPiAyMCkge1xuICAgICAgICByZXNwICs9ICdcIigqICcgKyBub2RlLmxlbmd0aCArICdCIHN0cmluZyAqKVwiJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzcCArPSBKU09OLnN0cmluZ2lmeShub2RlKVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBub2RlID09PSAnbnVtYmVyJykge1xuICAgICAgcmVzcCArPSBNYXRoLnJvdW5kKG5vZGUpIHx8IDAgLy8gT25seSBpbnRlZ2VycyBhbGxvd2VkXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNMb2dnaW5nICYmIG5vZGUuc2Vuc2l0aXZlKSB7XG4gICAgICByZXNwICs9ICdcIigqIHZhbHVlIGhpZGRlbiAqKVwiJ1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc3dpdGNoIChub2RlLnR5cGUudG9VcHBlckNhc2UoKSkge1xuICAgICAgY2FzZSAnTElURVJBTCc6XG4gICAgICAgIGlmIChpc0xvZ2dpbmcpIHtcbiAgICAgICAgICByZXNwICs9ICdcIigqICcgKyBub2RlLnZhbHVlLmxlbmd0aCArICdCIGxpdGVyYWwgKilcIidcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIW5vZGUudmFsdWUpIHtcbiAgICAgICAgICAgIHJlc3AgKz0gJ3swfVxcclxcbidcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcCArPSAneycgKyBub2RlLnZhbHVlLmxlbmd0aCArICd9XFxyXFxuJ1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXNwUGFydHMucHVzaChyZXNwKVxuICAgICAgICAgIHJlc3AgPSBub2RlLnZhbHVlIHx8ICcnXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnU1RSSU5HJzpcbiAgICAgICAgaWYgKGlzTG9nZ2luZyAmJiBub2RlLnZhbHVlLmxlbmd0aCA+IDIwKSB7XG4gICAgICAgICAgcmVzcCArPSAnXCIoKiAnICsgbm9kZS52YWx1ZS5sZW5ndGggKyAnQiBzdHJpbmcgKilcIidcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNwICs9IEpTT04uc3RyaW5naWZ5KG5vZGUudmFsdWUgfHwgJycpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ1RFWFQnOlxuICAgICAgY2FzZSAnU0VRVUVOQ0UnOlxuICAgICAgICBpZiAobm9kZS5jaHVuaykge1xuICAgICAgICAgIHJlc3AgPSByZXNwLnNsaWNlKDAsIC0xKSArICdcXHJcXG4nIC8vIFJlbW92ZSB0aGUgbGFzdCB0cmFpbGluZyBzcGFjZSBhbmQgYWRkIGEgbmV3bGluZVxuICAgICAgICAgIHJlc3BQYXJ0cy5wdXNoKHJlc3ApXG4gICAgICAgICAgcmVzcCA9IG5vZGUudmFsdWUgfHwgJydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNwICs9IG5vZGUudmFsdWUgfHwgJydcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdOVU1CRVInOlxuICAgICAgICByZXNwICs9IChub2RlLnZhbHVlIHx8IDApXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ0FUT00nOlxuICAgICAgY2FzZSAnU0VDVElPTic6XG4gICAgICAgIGxldCB2YWwgPSBub2RlLnZhbHVlIHx8ICcnXG5cbiAgICAgICAgaWYgKHZlcmlmeSh2YWwuY2hhckF0KDApID09PSAnXFxcXCcgPyB2YWwuc3Vic3RyKDEpIDogdmFsLCBBVE9NX0NIQVIoKSkgPj0gMCkge1xuICAgICAgICAgIHZhbCA9IEpTT04uc3RyaW5naWZ5KHZhbClcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3AgKz0gdmFsXG5cbiAgICAgICAgaWYgKG5vZGUuc2VjdGlvbikge1xuICAgICAgICAgIHJlc3AgKz0gJ1snXG4gICAgICAgICAgaWYgKG5vZGUuc2VjdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIG5lZWRzU3BhY2UgPSBmYWxzZVxuICAgICAgICAgICAgbm9kZS5zZWN0aW9uLmZvckVhY2god2FsaylcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzcCArPSAnXSdcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5wYXJ0aWFsKSB7XG4gICAgICAgICAgcmVzcCArPSAnPCcgKyBub2RlLnBhcnRpYWwuam9pbignLicpICsgJz4nXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH07XG5cbiAgW10uY29uY2F0KHJlc3BvbnNlLmF0dHJpYnV0ZXMgfHwgW10pLmZvckVhY2god2FsaylcblxuICBpZiAocmVzcC5sZW5ndGgpIHtcbiAgICByZXNwUGFydHMucHVzaChyZXNwKVxuICB9XG5cbiAgcmV0dXJuIGFzQXJyYXkgPyByZXNwUGFydHMgOiByZXNwUGFydHMuam9pbignJylcbn07XG4iXX0=