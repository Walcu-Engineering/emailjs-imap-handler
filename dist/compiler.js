'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (response, asArray, isLogging) {
  var respParts = [];
  var resp = (response.tag || '') + (response.command ? ' ' + response.command : '');
  var needsSpace = true;

  var walk = function walk(node) {
    if (resp.length > 0 && needsSpace) {
      resp += ' ';
    }

    if (Array.isArray(node)) {
      needsSpace = false;
      resp += '(';
      node.forEach(walk);
      resp += ')';
      return;
    } else {
      needsSpace = true;
    }

    if (!node && typeof node !== 'string' && typeof node !== 'number') {
      resp += 'NIL';
      return;
    }

    if (typeof node === 'string') {
      if (isLogging && node.length > 20) {
        resp += '"(* ' + node.length + 'B string *)"';
      } else {
        resp += JSON.stringify(node);
      }
      return;
    }

    if (typeof node === 'number') {
      resp += Math.round(node) || 0; // Only integers allowed
      return;
    }

    if (isLogging && node.sensitive) {
      resp += '"(* value hidden *)"';
      return;
    }

    switch (node.type.toUpperCase()) {
      case 'LITERAL':
        if (isLogging) {
          resp += '"(* ' + node.value.length + 'B literal *)"';
        } else {
          if (!node.value) {
            resp += '{0}\r\n';
          } else if (node.chunk) {
            needsSpace = false;
          } else {
            resp += '{' + node.value.length + '}\r\n';
          }
          respParts.push(resp);
          resp = node.value || '';
        }
        break;

      case 'STRING':
        if (isLogging && node.value.length > 20) {
          resp += '"(* ' + node.value.length + 'B string *)"';
        } else {
          resp += JSON.stringify(node.value || '');
        }
        break;
      case 'TEXT':
      case 'SEQUENCE':
        resp += node.value || '';
        break;

      case 'NUMBER':
        resp += node.value || 0;
        break;

      case 'ATOM':
      case 'SECTION':
        var val = node.value || '';

        if ((0, _formalSyntax.verify)(val.charAt(0) === '\\' ? val.substr(1) : val, (0, _formalSyntax.ATOM_CHAR)()) >= 0) {
          val = JSON.stringify(val);
        }

        resp += val;

        if (node.section) {
          resp += '[';
          if (node.section.length) {
            needsSpace = false;
            node.section.forEach(walk);
          }
          resp += ']';
        }
        if (node.partial) {
          resp += '<' + node.partial.join('.') + '>';
        }
        break;
    }
  };

  [].concat(response.attributes || []).forEach(walk);

  if (resp.length) {
    respParts.push(resp);
  }

  return asArray ? respParts : respParts.join('');
};

var _formalSyntax = require('./formal-syntax');

;

/**
 * Compiles an input object into
 */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21waWxlci5qcyJdLCJuYW1lcyI6WyJyZXNwb25zZSIsImFzQXJyYXkiLCJpc0xvZ2dpbmciLCJyZXNwUGFydHMiLCJyZXNwIiwidGFnIiwiY29tbWFuZCIsIm5lZWRzU3BhY2UiLCJ3YWxrIiwibm9kZSIsImxlbmd0aCIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJKU09OIiwic3RyaW5naWZ5IiwiTWF0aCIsInJvdW5kIiwic2Vuc2l0aXZlIiwidHlwZSIsInRvVXBwZXJDYXNlIiwidmFsdWUiLCJjaHVuayIsInB1c2giLCJ2YWwiLCJjaGFyQXQiLCJzdWJzdHIiLCJzZWN0aW9uIiwicGFydGlhbCIsImpvaW4iLCJjb25jYXQiLCJhdHRyaWJ1dGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7a0JBS2UsVUFBVUEsUUFBVixFQUFvQkMsT0FBcEIsRUFBNkJDLFNBQTdCLEVBQXdDO0FBQ3JELE1BQUlDLFlBQVksRUFBaEI7QUFDQSxNQUFJQyxPQUFPLENBQUNKLFNBQVNLLEdBQVQsSUFBZ0IsRUFBakIsS0FBd0JMLFNBQVNNLE9BQVQsR0FBbUIsTUFBTU4sU0FBU00sT0FBbEMsR0FBNEMsRUFBcEUsQ0FBWDtBQUNBLE1BQUlDLGFBQWEsSUFBakI7O0FBRUEsTUFBSUMsT0FBTyxTQUFQQSxJQUFPLENBQVVDLElBQVYsRUFBZ0I7QUFDekIsUUFBSUwsS0FBS00sTUFBTCxHQUFjLENBQWQsSUFBbUJILFVBQXZCLEVBQW1DO0FBQ2pDSCxjQUFRLEdBQVI7QUFDRDs7QUFFRCxRQUFJTyxNQUFNQyxPQUFOLENBQWNILElBQWQsQ0FBSixFQUF5QjtBQUN2QkYsbUJBQWEsS0FBYjtBQUNBSCxjQUFRLEdBQVI7QUFDQUssV0FBS0ksT0FBTCxDQUFhTCxJQUFiO0FBQ0FKLGNBQVEsR0FBUjtBQUNBO0FBQ0QsS0FORCxNQU1PO0FBQ0xHLG1CQUFhLElBQWI7QUFDRDs7QUFFRCxRQUFJLENBQUNFLElBQUQsSUFBUyxPQUFPQSxJQUFQLEtBQWdCLFFBQXpC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QixPQUFyQyxDQUE2Q0wsSUFBN0M7O0FBRUEsTUFBSUosS0FBS00sTUFBVCxFQUFpQjtBQUNmUCxjQUFVb0IsSUFBVixDQUFlbkIsSUFBZjtBQUNEOztBQUVELFNBQU9ILFVBQVVFLFNBQVYsR0FBc0JBLFVBQVUwQixJQUFWLENBQWUsRUFBZixDQUE3QjtBQUNELEM7O0FBbEhEOztBQWtIQzs7QUFoSEQiLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBVE9NX0NIQVIsIHZlcmlmeSB9IGZyb20gJy4vZm9ybWFsLXN5bnRheCdcblxuLyoqXG4gKiBDb21waWxlcyBhbiBpbnB1dCBvYmplY3QgaW50b1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAocmVzcG9uc2UsIGFzQXJyYXksIGlzTG9nZ2luZykge1xuICBsZXQgcmVzcFBhcnRzID0gW11cbiAgbGV0IHJlc3AgPSAocmVzcG9uc2UudGFnIHx8ICcnKSArIChyZXNwb25zZS5jb21tYW5kID8gJyAnICsgcmVzcG9uc2UuY29tbWFuZCA6ICcnKVxuICBsZXQgbmVlZHNTcGFjZSA9IHRydWVcblxuICBsZXQgd2FsayA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKHJlc3AubGVuZ3RoID4gMCAmJiBuZWVkc1NwYWNlKSB7XG4gICAgICByZXNwICs9ICcgJ1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgICBuZWVkc1NwYWNlID0gZmFsc2VcbiAgICAgIHJlc3AgKz0gJygnXG4gICAgICBub2RlLmZvckVhY2god2FsaylcbiAgICAgIHJlc3AgKz0gJyknXG4gICAgICByZXR1cm5cbiAgICB9IGVsc2Uge1xuICAgICAgbmVlZHNTcGFjZSA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoIW5vZGUgJiYgdHlwZW9mIG5vZGUgIT09ICdzdHJpbmcnICYmIHR5cGVvZiBub2RlICE9PSAnbnVtYmVyJykge1xuICAgICAgcmVzcCArPSAnTklMJ1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBub2RlID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGlzTG9nZ2luZyAmJiBub2RlLmxlbmd0aCA+IDIwKSB7XG4gICAgICAgIHJlc3AgKz0gJ1wiKCogJyArIG5vZGUubGVuZ3RoICsgJ0Igc3RyaW5nICopXCInXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNwICs9IEpTT04uc3RyaW5naWZ5KG5vZGUpXG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5vZGUgPT09ICdudW1iZXInKSB7XG4gICAgICByZXNwICs9IE1hdGgucm91bmQobm9kZSkgfHwgMCAvLyBPbmx5IGludGVnZXJzIGFsbG93ZWRcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0xvZ2dpbmcgJiYgbm9kZS5zZW5zaXRpdmUpIHtcbiAgICAgIHJlc3AgKz0gJ1wiKCogdmFsdWUgaGlkZGVuICopXCInXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzd2l0Y2ggKG5vZGUudHlwZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBjYXNlICdMSVRFUkFMJzpcbiAgICAgICAgaWYgKGlzTG9nZ2luZykge1xuICAgICAgICAgIHJlc3AgKz0gJ1wiKCogJyArIG5vZGUudmFsdWUubGVuZ3RoICsgJ0IgbGl0ZXJhbCAqKVwiJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghbm9kZS52YWx1ZSkge1xuICAgICAgICAgICAgcmVzcCArPSAnezB9XFxyXFxuJ1xuICAgICAgICAgIH0gZWxzZSBpZihub2RlLmNodW5rKSB7XG4gICAgICAgICAgICBuZWVkc1NwYWNlID0gZmFsc2VcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcCArPSAneycgKyBub2RlLnZhbHVlLmxlbmd0aCArICd9XFxyXFxuJ1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXNwUGFydHMucHVzaChyZXNwKVxuICAgICAgICAgIHJlc3AgPSBub2RlLnZhbHVlIHx8ICcnXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnU1RSSU5HJzpcbiAgICAgICAgaWYgKGlzTG9nZ2luZyAmJiBub2RlLnZhbHVlLmxlbmd0aCA+IDIwKSB7XG4gICAgICAgICAgcmVzcCArPSAnXCIoKiAnICsgbm9kZS52YWx1ZS5sZW5ndGggKyAnQiBzdHJpbmcgKilcIidcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNwICs9IEpTT04uc3RyaW5naWZ5KG5vZGUudmFsdWUgfHwgJycpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ1RFWFQnOlxuICAgICAgY2FzZSAnU0VRVUVOQ0UnOlxuICAgICAgICByZXNwICs9IG5vZGUudmFsdWUgfHwgJydcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnTlVNQkVSJzpcbiAgICAgICAgcmVzcCArPSAobm9kZS52YWx1ZSB8fCAwKVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdBVE9NJzpcbiAgICAgIGNhc2UgJ1NFQ1RJT04nOlxuICAgICAgICBsZXQgdmFsID0gbm9kZS52YWx1ZSB8fCAnJ1xuXG4gICAgICAgIGlmICh2ZXJpZnkodmFsLmNoYXJBdCgwKSA9PT0gJ1xcXFwnID8gdmFsLnN1YnN0cigxKSA6IHZhbCwgQVRPTV9DSEFSKCkpID49IDApIHtcbiAgICAgICAgICB2YWwgPSBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICAgICAgIH1cblxuICAgICAgICByZXNwICs9IHZhbFxuXG4gICAgICAgIGlmIChub2RlLnNlY3Rpb24pIHtcbiAgICAgICAgICByZXNwICs9ICdbJ1xuICAgICAgICAgIGlmIChub2RlLnNlY3Rpb24ubGVuZ3RoKSB7XG4gICAgICAgICAgICBuZWVkc1NwYWNlID0gZmFsc2VcbiAgICAgICAgICAgIG5vZGUuc2VjdGlvbi5mb3JFYWNoKHdhbGspXG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3AgKz0gJ10nXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUucGFydGlhbCkge1xuICAgICAgICAgIHJlc3AgKz0gJzwnICsgbm9kZS5wYXJ0aWFsLmpvaW4oJy4nKSArICc+J1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9O1xuXG4gIFtdLmNvbmNhdChyZXNwb25zZS5hdHRyaWJ1dGVzIHx8IFtdKS5mb3JFYWNoKHdhbGspXG5cbiAgaWYgKHJlc3AubGVuZ3RoKSB7XG4gICAgcmVzcFBhcnRzLnB1c2gocmVzcClcbiAgfVxuXG4gIHJldHVybiBhc0FycmF5ID8gcmVzcFBhcnRzIDogcmVzcFBhcnRzLmpvaW4oJycpXG59O1xuIl19