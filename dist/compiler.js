'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (response, asArray, isLogging) {
  var respParts = [];
  var resp = (response.tag || '') + (response.command ? ' ' + response.command : '');
  var needsSpace = true;

  var walk = function walk(node) {
    if (resp.length > 0 && needsSpace) {
      resp += ' ';
    }

    if (Array.isArray(node)) {
      needsSpace = false;
      resp += '(';
      node.forEach(walk);
      resp += ')';
      return;
    } else {
      needsSpace = true;
    }

    if (!node && typeof node !== 'string' && typeof node !== 'number') {
      resp += 'NIL';
      return;
    }

    if (typeof node === 'string') {
      if (isLogging && node.length > 20) {
        resp += '"(* ' + node.length + 'B string *)"';
      } else {
        resp += JSON.stringify(node);
      }
      return;
    }

    if (typeof node === 'number') {
      resp += Math.round(node) || 0; // Only integers allowed
      return;
    }

    if (isLogging && node.sensitive) {
      resp += '"(* value hidden *)"';
      return;
    }

    switch (node.type.toUpperCase()) {
      case 'LITERAL':
        if (isLogging) {
          resp += '"(* ' + node.value.length + 'B literal *)"';
        } else {
          if (!node.value) {
            resp += '{0}\r\n';
          } else if (node.chunk) {
            resp = resp.slice(0, -1) + '\r\n';
            needsSpace = false;
          } else {
            resp += '{' + node.value.length + '}\r\n';
          }
          respParts.push(resp);
          resp = node.value || '';
        }
        break;

      case 'STRING':
        if (isLogging && node.value.length > 20) {
          resp += '"(* ' + node.value.length + 'B string *)"';
        } else {
          resp += JSON.stringify(node.value || '');
        }
        break;
      case 'TEXT':
      case 'SEQUENCE':
        resp += node.value || '';
        break;

      case 'NUMBER':
        resp += node.value || 0;
        break;

      case 'ATOM':
      case 'SECTION':
        var val = node.value || '';

        if ((0, _formalSyntax.verify)(val.charAt(0) === '\\' ? val.substr(1) : val, (0, _formalSyntax.ATOM_CHAR)()) >= 0) {
          val = JSON.stringify(val);
        }

        resp += val;

        if (node.section) {
          resp += '[';
          if (node.section.length) {
            needsSpace = false;
            node.section.forEach(walk);
          }
          resp += ']';
        }
        if (node.partial) {
          resp += '<' + node.partial.join('.') + '>';
        }
        break;
    }
  };

  [].concat(response.attributes || []).forEach(walk);

  if (resp.length) {
    respParts.push(resp);
  }

  return asArray ? respParts : respParts.join('');
};

var _formalSyntax = require('./formal-syntax');

;

/**
 * Compiles an input object into
 */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21waWxlci5qcyJdLCJuYW1lcyI6WyJyZXNwb25zZSIsImFzQXJyYXkiLCJpc0xvZ2dpbmciLCJyZXNwUGFydHMiLCJyZXNwIiwidGFnIiwiY29tbWFuZCIsIm5lZWRzU3BhY2UiLCJ3YWxrIiwibm9kZSIsImxlbmd0aCIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJKU09OIiwic3RyaW5naWZ5IiwiTWF0aCIsInJvdW5kIiwic2Vuc2l0aXZlIiwidHlwZSIsInRvVXBwZXJDYXNlIiwidmFsdWUiLCJjaHVuayIsInNsaWNlIiwicHVzaCIsInZhbCIsImNoYXJBdCIsInN1YnN0ciIsInNlY3Rpb24iLCJwYXJ0aWFsIiwiam9pbiIsImNvbmNhdCIsImF0dHJpYnV0ZXMiXSwibWFwcGluZ3MiOiI7Ozs7OztrQkFLZSxVQUFVQSxRQUFWLEVBQW9CQyxPQUFwQixFQUE2QkMsU0FBN0IsRUFBd0M7QUFDckQsTUFBSUMsWUFBWSxFQUFoQjtBQUNBLE1BQUlDLE9BQU8sQ0FBQ0osU0FBU0ssR0FBVCxJQUFnQixFQUFqQixLQUF3QkwsU0FBU00sT0FBVCxHQUFtQixNQUFNTixTQUFTTSxPQUFsQyxHQUE0QyxFQUFwRSxDQUFYO0FBQ0EsTUFBSUMsYUFBYSxJQUFqQjs7QUFFQSxNQUFJQyxPQUFPLFNBQVBBLElBQU8sQ0FBVUMsSUFBVixFQUFnQjtBQUN6QixRQUFJTCxLQUFLTSxNQUFMLEdBQWMsQ0FBZCxJQUFtQkgsVUFBdkIsRUFBbUM7QUFDakNILGNBQVEsR0FBUjtBQUNEOztBQUVELFFBQUlPLE1BQU1DLE9BQU4sQ0FBY0gsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCRixtQkFBYSxLQUFiO0FBQ0FILGNBQVEsR0FBUjtBQUNBSyxXQUFLSSxPQUFMLENBQWFMLElBQWI7QUFDQUosY0FBUSxHQUFSO0FBQ0E7QUFDRCxLQU5ELE1BTU87QUFDTEcsbUJBQWEsSUFBYjtBQUNEOztBQUVELFFBQUksQ0FBQ0UsSUFBRCxJQUFTLE9BQU9BLElBQVAsS0FB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O0FBdkRKO0FBeURELEdBaEdEOztBQWtHQSxLQUFHQyxNQUFILENBQVUvQixTQUFTZ0MsVUFBVCxJQUF1QixFQUFqQyxFQUFxQ25CLE9BQXJDLENBQTZDTCxJQUE3Qzs7QUFFQSxNQUFJSixLQUFLTSxNQUFULEVBQWlCO0FBQ2ZQLGNBQVVxQixJQUFWLENBQWVwQixJQUFmO0FBQ0Q7O0FBRUQsU0FBT0gsVUFBVUUsU0FBVixHQUFzQkEsVUFBVTJCLElBQVYsQ0FBZSxFQUFmLENBQTdCO0FBQ0QsQzs7QUFuSEQ7O0FBbUhDOztBQWpIRCIsImZpbGUiOiJjb21waWxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFUT01fQ0hBUiwgdmVyaWZ5IH0gZnJvbSAnLi9mb3JtYWwtc3ludGF4J1xuXG4vKipcbiAqIENvbXBpbGVzIGFuIGlucHV0IG9iamVjdCBpbnRvXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChyZXNwb25zZSwgYXNBcnJheSwgaXNMb2dnaW5nKSB7XG4gIGxldCByZXNwUGFydHMgPSBbXVxuICBsZXQgcmVzcCA9IChyZXNwb25zZS50YWcgfHwgJycpICsgKHJlc3BvbnNlLmNvbW1hbmQgPyAnICcgKyByZXNwb25zZS5jb21tYW5kIDogJycpXG4gIGxldCBuZWVkc1NwYWNlID0gdHJ1ZVxuXG4gIGxldCB3YWxrID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAocmVzcC5sZW5ndGggPiAwICYmIG5lZWRzU3BhY2UpIHtcbiAgICAgIHJlc3AgKz0gJyAnXG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcbiAgICAgIG5lZWRzU3BhY2UgPSBmYWxzZVxuICAgICAgcmVzcCArPSAnKCdcbiAgICAgIG5vZGUuZm9yRWFjaCh3YWxrKVxuICAgICAgcmVzcCArPSAnKSdcbiAgICAgIHJldHVyblxuICAgIH0gZWxzZSB7XG4gICAgICBuZWVkc1NwYWNlID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmICghbm9kZSAmJiB0eXBlb2Ygbm9kZSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIG5vZGUgIT09ICdudW1iZXInKSB7XG4gICAgICByZXNwICs9ICdOSUwnXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoaXNMb2dnaW5nICYmIG5vZGUubGVuZ3RoID4gMjApIHtcbiAgICAgICAgcmVzcCArPSAnXCIoKiAnICsgbm9kZS5sZW5ndGggKyAnQiBzdHJpbmcgKilcIidcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3AgKz0gSlNPTi5zdHJpbmdpZnkobm9kZSlcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJlc3AgKz0gTWF0aC5yb3VuZChub2RlKSB8fCAwIC8vIE9ubHkgaW50ZWdlcnMgYWxsb3dlZFxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGlzTG9nZ2luZyAmJiBub2RlLnNlbnNpdGl2ZSkge1xuICAgICAgcmVzcCArPSAnXCIoKiB2YWx1ZSBoaWRkZW4gKilcIidcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHN3aXRjaCAobm9kZS50eXBlLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgJ0xJVEVSQUwnOlxuICAgICAgICBpZiAoaXNMb2dnaW5nKSB7XG4gICAgICAgICAgcmVzcCArPSAnXCIoKiAnICsgbm9kZS52YWx1ZS5sZW5ndGggKyAnQiBsaXRlcmFsICopXCInXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFub2RlLnZhbHVlKSB7XG4gICAgICAgICAgICByZXNwICs9ICd7MH1cXHJcXG4nXG4gICAgICAgICAgfSBlbHNlIGlmKG5vZGUuY2h1bmspIHtcbiAgICAgICAgICAgIHJlc3AgPSByZXNwLnNsaWNlKDAsLTEpICsgJ1xcclxcbidcbiAgICAgICAgICAgIG5lZWRzU3BhY2UgPSBmYWxzZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNwICs9ICd7JyArIG5vZGUudmFsdWUubGVuZ3RoICsgJ31cXHJcXG4nXG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3BQYXJ0cy5wdXNoKHJlc3ApXG4gICAgICAgICAgcmVzcCA9IG5vZGUudmFsdWUgfHwgJydcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdTVFJJTkcnOlxuICAgICAgICBpZiAoaXNMb2dnaW5nICYmIG5vZGUudmFsdWUubGVuZ3RoID4gMjApIHtcbiAgICAgICAgICByZXNwICs9ICdcIigqICcgKyBub2RlLnZhbHVlLmxlbmd0aCArICdCIHN0cmluZyAqKVwiJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3AgKz0gSlNPTi5zdHJpbmdpZnkobm9kZS52YWx1ZSB8fCAnJylcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnVEVYVCc6XG4gICAgICBjYXNlICdTRVFVRU5DRSc6XG4gICAgICAgIHJlc3AgKz0gbm9kZS52YWx1ZSB8fCAnJ1xuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdOVU1CRVInOlxuICAgICAgICByZXNwICs9IChub2RlLnZhbHVlIHx8IDApXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ0FUT00nOlxuICAgICAgY2FzZSAnU0VDVElPTic6XG4gICAgICAgIGxldCB2YWwgPSBub2RlLnZhbHVlIHx8ICcnXG5cbiAgICAgICAgaWYgKHZlcmlmeSh2YWwuY2hhckF0KDApID09PSAnXFxcXCcgPyB2YWwuc3Vic3RyKDEpIDogdmFsLCBBVE9NX0NIQVIoKSkgPj0gMCkge1xuICAgICAgICAgIHZhbCA9IEpTT04uc3RyaW5naWZ5KHZhbClcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3AgKz0gdmFsXG5cbiAgICAgICAgaWYgKG5vZGUuc2VjdGlvbikge1xuICAgICAgICAgIHJlc3AgKz0gJ1snXG4gICAgICAgICAgaWYgKG5vZGUuc2VjdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIG5lZWRzU3BhY2UgPSBmYWxzZVxuICAgICAgICAgICAgbm9kZS5zZWN0aW9uLmZvckVhY2god2FsaylcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzcCArPSAnXSdcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5wYXJ0aWFsKSB7XG4gICAgICAgICAgcmVzcCArPSAnPCcgKyBub2RlLnBhcnRpYWwuam9pbignLicpICsgJz4nXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH07XG5cbiAgW10uY29uY2F0KHJlc3BvbnNlLmF0dHJpYnV0ZXMgfHwgW10pLmZvckVhY2god2FsaylcblxuICBpZiAocmVzcC5sZW5ndGgpIHtcbiAgICByZXNwUGFydHMucHVzaChyZXNwKVxuICB9XG5cbiAgcmV0dXJuIGFzQXJyYXkgPyByZXNwUGFydHMgOiByZXNwUGFydHMuam9pbignJylcbn07XG4iXX0=